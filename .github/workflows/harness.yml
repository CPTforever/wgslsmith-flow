name: harness

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - crates/parser/**
      - crates/reconditioner/**
      - crates/wgslsmith/**
      - docs/**

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
        include:
          - target: x86_64-pc-windows-msvc
            os: ubuntu-latest
            artifact: win64
            exe_suffix: .exe
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact: linux64
            exe_suffix: ""
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact: macos64
            exe_suffix: ""

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install clang
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          sudo apt-get update
          sudo apt-get install clang-12 clang-tools-12 llvm-12

      - name: Install xwin
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          curl -L https://github.com/Jake-Shadle/xwin/releases/download/0.2.0/xwin-0.2.0-x86_64-unknown-linux-musl.tar.gz > $HOME/xwin.tar.gz
          tar -xvf $HOME/xwin.tar.gz -C $HOME
          sudo mv $HOME/xwin-0.2.0-x86_64-unknown-linux-musl/xwin /usr/bin

      - name: Cache windows sdk
        id: cache-windows-sdk
        if: matrix.target == 'x86_64-pc-windows-msvc'
        uses: actions/cache@v3
        with:
          path: .xwin-cache
          key: xwin-cache

      - name: Download windows sdk
        if: matrix.target == 'x86_64-pc-windows-msvc' && steps.cache-windows-sdk.outputs.cache-hit != 'true'
        run: xwin --accept-license splat --include-debug-libs

      - name: Download dawn libs
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          release_tag=`gh release view --json tagName -q '.tagName' -R wgslsmith/dawn-build`
          gh release download $release_tag -p dawn-static-${{ matrix.artifact }}.tar.gz -R wgslsmith/dawn-build
          mkdir dawn-static-${{ matrix.artifact }}
          tar -xvf dawn-static-${{ matrix.artifact }}.tar.gz

      - name: Checkout dawn repo
        shell: bash
        run: |
          git clone https://dawn.googlesource.com/dawn ${{ runner.temp }}/dawn
          cd ${{ runner.temp }}/dawn
          git checkout $(cat ${{ github.workspace }}/dawn-static-${{ matrix.artifact }}/COMMIT)

      - name: Build harness
        uses: actions-rs/cargo@v1
        env:
          DAWN_SRC_DIR: ${{ runner.temp }}/dawn
          DAWN_BUILD_DIR: ${{ github.workspace }}/dawn-static-${{ matrix.artifact }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: >-
            -C linker=lld-link-12
            -Lnative=${{ github.workspace }}/.xwin-cache/splat/crt/lib/x86_64
            -Lnative=${{ github.workspace }}/.xwin-cache/splat/sdk/lib/ucrt/x86_64
            -Lnative=${{ github.workspace }}/.xwin-cache/splat/sdk/lib/um/x86_64
          CXX_x86_64_pc_windows_msvc: clang-cl-12
          CXXFLAGS_x86_64_pc_windows_msvc: >-
            /imsvc ${{ github.workspace }}/.xwin-cache/splat/crt/include
            /imsvc ${{ github.workspace }}/.xwin-cache/splat/sdk/include/ucrt
          AR_x86_64_pc_windows_msvc: llvm-lib-12
          MACOSX_DEPLOYMENT_TARGET: "11.0"
        with:
          command: build
          args: -p harness --release --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: harness-${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/harness${{ matrix.exe_suffix }}

  test:
    runs-on: ${{ matrix.os }}

    needs: build

    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          # - macos-latest
        include:
          - os: windows-latest
            artifact: win64
          - os: ubuntu-latest
            artifact: linux64
          # - os: macos-latest
          #   artifact: macos64

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v2

      - name: Download swiftshader
        if: matrix.os != 'macos-latest'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          release_tag=`gh release view --json tagName -q '.tagName' -R wgslsmith/swiftshader-build`
          gh release download $release_tag -p swiftshader-${{ matrix.artifact }}.tar.gz -R wgslsmith/swiftshader-build
          mkdir swiftshader-${{ matrix.artifact }}
          tar -xvf swiftshader-${{ matrix.artifact }}.tar.gz

      - name: Download harness
        uses: actions/download-artifact@v3
        with:
          name: harness-${{ matrix.artifact }}

      - name: Copy vulkan loader
        if: matrix.os == 'windows-latest'
        run: cp swiftshader-${{ matrix.artifact }}/vulkan-1.dll .

      - name: Run test shaders
        env:
          VK_ICD_FILENAMES: swiftshader-${{ matrix.artifact }}/vk_swiftshader_icd.json
        shell: bash
        run: |
          chmod +x ./harness
          cat crates/harness/test.wgsl | ./harness
